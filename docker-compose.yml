version: '3.3'
services:
  proxy:
    image: traefik:v2.10
    networks:
      - traefik-public
      #- default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - '80:80'
      - '8090:8080'
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Disable Docker Swarm mode for local development
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.services.traefik-public.loadbalancer.server.port=80

  db:
    image: postgres:14-alpine
    networks:
      - traefik-public
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
    environment:
      - POSTGRES_DB=hit-count-db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  backend:
    ports:
      - '8080:8080'
    networks:
      - traefik-public
    depends_on:
      - db
    working_dir: /app
    #volumes:
    #- .:/app
    environment:
      - PORT=8080
      - DATABASE_URL=postgresql://postgres:postgres@db/hit-count-db?schema=public
    image: dshit-api
    #build:
    #context: .
    #dockerfile: Dockerfile.api
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
      - traefik.http.services.backend.loadbalancer.server.port=80

  #frontend:
  #build:
  #context: ./frontend
  #args:
  #FRONTEND_ENV: dev
  #labels:
  #- traefik.enable=true
  #- traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
  #- traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=PathPrefix(`/`)
  #- traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80

volumes:
  pgdata:
networks:
  traefik-public:
    external: true
